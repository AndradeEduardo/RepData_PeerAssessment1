xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
with(colors(), 10)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
colorRampPalette(c("red", "yellow"))
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
p2(2)
showMe(p2(2))
p1
?func
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 5)
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
play()
showMe(pal(150))
showMe(pal(300))
nxt()
image(volcano, pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(kernlab)
install.packages(("kernlab"))
library(kernlab)
data("spam")
set.sed(3435)
set.sed(3435)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
spam[trainIndicator == 1, ]
trainIndicator == 1
names(trainSpam)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
str(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve, trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
trainSpam[, 1:4]
hcluster <- hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hcluster)
x=read.table('household_power_consumption.txt',header=TRUE, sep=';', stringsAsFactors = FALSE)
dataset=subset(x,x$Date=='1/2/2007' | x$Date=='2/2/2007')
dataset$Global_active_power=as.numeric(dataset$Global_active_power)
dataset$Time=strptime(paste(dataset$Date, dataset$Time),format="%d/%m/%Y %H:%M")
dataset$Date=as.Date(dataset$Date, format="%d/%m/%Y")
dataset$Global_active_power=as.numeric(dataset$Global_active_power)
hist(dataset$Global_active_power,xlab='Global Active Power (kilowatts)',
ylab='Frequency', main='Global Active Power',col='red')
plot(dataset$Time,dataset$Global_active_power,type='l',ylab='Global Active Power (kilowatts)',
xlab='')
plot(dataset$Time,dataset$Sub_metering_1,ylab='Energy sub meeting',type='l',xlab='')
points(dataset$Time,dataset$Sub_metering_2,type='l',col='red')
points(dataset$Time,dataset$Sub_metering_3,type='l',col='blue')
legend('topright',legend=c('Sub_metering_1','Sub_metering_2','Sub_metering_3'),
col = c('black','red','blue'),lty=c(1,1,1))
rm(list = ls())
plot2 <- function(targetData){
par(cex = 0.75)
plot(unclass(targetData$DateTime),
targetData$Global_active_power/500,
type = "l",
ylab = "Global Active Power (kilowatts)",
xlab = "",
xaxt = "n",
yaxt = "n",
axes = TRUE)
#drawing the axes of the plot
minDate <- min(unclass(targetData$DateTime))
maxDate <- max(unclass(targetData$DateTime))
axis(1,
seq (minDate, maxDate, by = (maxDate - minDate)/2),
labels = c("Thu", "Fri", "Sat")
)
axis (2, seq(0,
max(targetData$Global_active_power)/500*0.75,
by = max(targetData$Global_active_power)/500/3*0.75),
seq (0, 6, by = 2))
}
# Function that reads
# Electric Power Consuption source data
# and returns just the data set used in plot2
# sourceDir must receive the path where "household_power_consumption.txt" is stored
readElectricPowerData <- function(sourceDir){
sourceFile <- paste(sourceDir, "household_power_consumption.txt", sep = "/")
ecpData <- read.table(sourceFile,
header = TRUE,
sep = ";",
stringsAsFactors = FALSE,
na.strings = c("?"))
ecpTargetData <- subset(ecpData, Date == "1/2/2007" | Date == "2/2/2007")
# convert from charqcter to numeric
ecpTargetData$Global_active_power <- as.numeric(ecpTargetData$Global_active_power)
#creating a new column of date and time with class POSIXct
ecpTargetData["DateTime"] <- as.POSIXct(paste(ecpTargetData[,1],
ecpTargetData[,2], sep = " "),
format = "%d/%m/%Y %H:%M:%S")
# checking data set details
#head(ecpTargetData)
#str(ecpTargetData)
#View(ecpTargetData)
rm(ecpData) #freeing up memory
ecpTargetData #returning target data set
}
# setting the directory where "household_power_consumption.txt" file is located
# while testing the code, please set this folder according to where
# "household_power_consumption.txt" is located
sourceDir <- getwd()
# reading data from source file
ecpTargetData <- readElectricPowerData(sourceDir)
plot2(ecpTargetData)
plot1 <- function(targetData){
maxValue <- max(targetData$Global_active_power)
par(cex = 0.75) # scaling font size for label to fit y axis
# to scale the size to be according to the exercise, global activity power
# shall be devided by 500
hist(targetData$Global_active_power,
xlab = "Global Active Power (kilowatts)",
xlim = c(0, maxValue),
col = "red",
main = "Global Active Power",
axes = TRUE,
breaks = seq(0, 7.5, by = 0.5)
)
}
plot1(ecpTargetData)
plot3 <- function(targetData){
par(cex = 0.75)
plot(unclass(targetData$DateTime),
targetData$Sub_metering_1,
ylim = range(targetData$Sub_metering_1),
col = "black",
type = "n",
ylab = "Energy sub metering",
xlab = "",
xaxt = "n",
yaxt = "n",
axes = TRUE)
lines(unclass(targetData$DateTime), targetData$Sub_metering_1, col = "black")
lines(unclass(targetData$DateTime), targetData$Sub_metering_2, col = "red")
lines(unclass(targetData$DateTime), targetData$Sub_metering_3, col = "blue")
#drawing the axes of the plot
minDate <- min(unclass(ecpTargetData$DateTime))
maxDate <- max(unclass(ecpTargetData$DateTime))
axis(1,
seq (minDate, maxDate, by = (maxDate - minDate)/2),
labels = c("Thu", "Fri", "Sat")
)
axis (2, seq(0,
max(targetData$Sub_metering_1)*0.75,
by = max(targetData$Sub_metering_1)/3*0.75),
seq (0, 30, by = 10))
legend(x = "topright",
lty=c(1,1),
legend = c("Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3"),
col = c("black", "red", "blue"))
}
plot3(ecpTargetData)
plot4 <- function(targetData){
# scaling font to 75% of default size and dividing canvas on 4 parts
par(cex = 0.75, mfcol = c(2,2))
plotGlobalActivePower(targetData)
plotSubMetering(targetData)
plotVoltage(targetData)
plotGlobalReactivePower(targetData)
}
plotSubMetering <- function(targetData){
plot(unclass(targetData$DateTime),
targetData$Sub_metering_1,
ylim = range(targetData$Sub_metering_1),
col = "black",
type = "n",
ylab = "Energy sub metering",
xlab = "",
xaxt = "n",
yaxt = "n",
axes = TRUE)
lines(unclass(targetData$DateTime), targetData$Sub_metering_1, col = "black")
lines(unclass(targetData$DateTime), targetData$Sub_metering_2, col = "red")
lines(unclass(targetData$DateTime), targetData$Sub_metering_3, col = "blue")
#drawing the axes of the plot
minDate <- min(unclass(ecpTargetData$DateTime))
maxDate <- max(unclass(ecpTargetData$DateTime))
axis(1,
seq (minDate, maxDate, by = (maxDate - minDate)/2),
labels = c("Thu", "Fri", "Sat")
)
axis (2, seq(0,
max(targetData$Sub_metering_1)*0.75,
by = max(targetData$Sub_metering_1)/3*0.75),
seq (0, 30, by = 10))
legend(x = "topright",
lty=c(1,1),
legend = c("Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3"),
col = c("black", "red", "blue"),
bty = "n")
}
plotGlobalActivePower <- function(targetData){
maxValue <- max(targetData$Global_active_power)
plot(unclass(targetData$DateTime),
targetData$Global_active_power/500,
type = "l",
ylab = "Global Active Power",
xlab = "",
xaxt = "n",
yaxt = "n",
axes = TRUE)
#drawing the axes of the plot
minDate <- min(unclass(targetData$DateTime))
maxDate <- max(unclass(targetData$DateTime))
axis(1,
seq (minDate, maxDate, by = (maxDate - minDate)/2),
labels = c("Thu", "Fri", "Sat")
)
axis (2, seq(0,
max(targetData$Global_active_power)/500*0.75,
by = max(targetData$Global_active_power)/500/3*0.75),
seq (0, 6, by = 2))
}
plotVoltage <- function(targetData){
maxValue <- max(targetData$Voltage)
plot(unclass(targetData$DateTime),
targetData$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime",
xaxt = "n",
yaxt = "n",
axes = TRUE)
#drawing the axes of the plot
minDate <- min(unclass(targetData$DateTime))
maxDate <- max(unclass(targetData$DateTime))
axis(1,
seq (minDate, maxDate, by = (maxDate - minDate)/2),
labels = c("Thu", "Fri", "Sat")
)
axis (2, seq(234, 246, by = 4), seq(234, 246, by = 4))
}
plotGlobalReactivePower <- function(targetData){
maxValue <- max(targetData$Global_reactive_power)
plot(unclass(targetData$DateTime),
targetData$Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime",
xaxt = "n",
yaxt = "n",
axes = TRUE)
#drawing the axes of the plot
minDate <- min(unclass(targetData$DateTime))
maxDate <- max(unclass(targetData$DateTime))
axis(1,
seq (minDate, maxDate, by = (maxDate - minDate)/2),
labels = c("Thu", "Fri", "Sat")
)
axis (2, seq(0.0, 0.5, by = 0.1), c("0.0", "0.1" , "0.2", "0.3", "0.4", "0.5" ))
}
plot4(ecpTargetData)
dev.off()
png(filename = "plot4.png", width = 480, height = 480)
plot4(ecpTargetData)
dev.off()
png(filename = "plot4.png", width = 480, height = 480)
plot4(ecpTargetData)
dev.off()
getwd()
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
swirl()
library("swirl")
rm (list = ls())
swirl()
str(mpg)
qplot(displ, hwy, mpg)
?qplot
qplot(displ, hwy, mpg)
library(swirl)
rm (list = ls())
swirl()
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplor(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", calor = manufacturer)
str(mpg)
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv), ggtitle("Swirl Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
play()
plot(myx, myy, type="l")
nxt
nxt()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() +facet_grid(drv ~ cyk, margins= TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins= TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins= TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
play()
g + geom_point() + facet_grid(drv ~ cyl, margins= TRUE) + geom_smooth(method = "lm", se = FALSE, size = 1, color = "black")
nxt()
g + geom_point() + facet_grid(drv ~ cyl, margins= TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamond, binwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut
)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut
)
qplot(carat, price, data = diamonds, color = cut)
play()
qplot(carat, price, data = diamonds, color = cut, alpha = 1/2)
qplot(carat, price, data = diamonds, color = cut, alpha = 1/5)
qplot(carat, price, data = diamonds, color = cut, alpha = 1)
qplot(carat, price, data = diamonds, color = cut, alpha = 0.1)
nxt()
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color = cut, geom_smooth("lm"))
qplot(carat, price, data = diamonds, color = cut, geom_smooth("lm"))
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(dataset = diamonds, aes(depth, price))
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point()
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
play()
seq(0 ,1 ,length = 4)
nxt()
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
play()
diamonds$car2
nxt()
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ cart2)
g + geom_point(alpha = 1/3) + facet_grid(cut ~ cart2)
g
summary(g)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamond[myd, ]
diamonds[myd, ]
g+geom_point(alpha=1/3)+facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
play()
Sys.getlocale()
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
play()
exit()
options
quit()
nxt()
exit()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, color = "blue")
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply (distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
point(x, y, pch = 19, cex = 2, col = cols1[newClust2])
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
mkObj$iter
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
hist(x = stepsByDay$Date, y = stepsByDay$Steps)
rm(list = ls())
library(ggplot2)
library(knitr)
library(chron)
opts_chunk$set(echo = TRUE)
# setting decimal number output
knit_hooks$set(inline = function(x) {
prettyNum(round(x,2), big.mark=",")
})
if (!("activity.csv" %in% dir())){
unzip("activity.zip")
}
actData <- read.csv("activity.csv",
header = TRUE,
colClasses = c("numeric", "Date", "numeric"),
na.strings = "NA")
stepsByDay <- aggregate(actData$steps, by = list(actData$date), FUN = sum)
colnames(stepsByDay) <- c("Date", "Steps")
hist(x = stepsByDay$Date, y = stepsByDay$Steps)
rm(list = ls())
library(ggplot2)
library(knitr)
library(chron)
opts_chunk$set(echo = TRUE)
# setting decimal number output
knit_hooks$set(inline = function(x) {
prettyNum(round(x,2), big.mark=",")
})
if (!("activity.csv" %in% dir())){
unzip("activity.zip")
}
setwd("~/")
setwd("~/github/ReproducibleResearch/RepData_PeerAssessment1")
if (!("activity.csv" %in% dir())){
unzip("activity.zip")
}
actData <- read.csv("activity.csv",
header = TRUE,
colClasses = c("numeric", "Date", "numeric"),
na.strings = "NA")
stepsByDay <- aggregate(actData$steps, by = list(actData$date), FUN = sum)
colnames(stepsByDay) <- c("Date", "Steps")
hist(x = stepsByDay$Date, y = stepsByDay$Steps)
hist(x = stepsByDay$Date,
y = stepsByDay$Steps,
breaks = length(stepsByDay$Steps) - 1)
hist(x = stepsByDay$Steps,
breaks = length(stepsByDay$Steps) - 1)
plot(stepsByDay$Date,
stepsByDay$Steps,
type = "h",
lwd=8,
main = "Total of Steps per Day",
xlab = "Date",
ylab = "Frequency",
col = "orange")
